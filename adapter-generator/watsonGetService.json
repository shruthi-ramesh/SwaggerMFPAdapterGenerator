{
    "swagger": "2.0",
    "info": {
        "title": "Discovery",
        "version": "1.0",
        "description": "The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results. "
    },
    "externalDocs": {
        "description": "For more information about these methods, check out the API Reference",
        "url": "http://www.ibm.com/watson/developercloud/discovery/api/v1/"
    },
    "basePath": "/discovery/api",
    "tags": [
        {
            "name": "discovery"
        }
    ],
    "paths": {
        "/environment": {
            "get": {
                "summary": "List environments",
                "description": "There are two environments returned:\n\n\n  * A read-only environment with the News collection. This environment is managed by IBM.\n  * A user-created environment (created using the `POST /environments` operation) which the user can utilize to analyze and query their own data.      \n",
                "tags": [
                    "Environments"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Search environments with the given name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/versionParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/GetEnvironmentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/environments/{environment_id}": {
            "get": {
                "summary": "List environment info",
                "tags": [
                    "Environments"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/environmentIdParam"
                    },
                    {
                        "$ref": "#/parameters/versionParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Environment fetched",
                        "schema": {
                            "$ref": "#/definitions/Environment"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/environments/{environment_id}/configurations/{configuration_id}": {
            "get": {
                "summary": "List configuration details",
                "tags": [
                    "Configurations"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/environmentIdParam"
                    },
                    {
                        "$ref": "#/parameters/configurationIdParam"
                    },
                    {
                        "$ref": "#/parameters/versionParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration successfully fetched",
                        "schema": {
                            "$ref": "#/definitions/Configuration"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/environments/{environment_id}/collections/{collection_id}": {
            "get": {
                "summary": "List collection details",
                "tags": [
                    "Collections"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/environmentIdParam"
                    },
                    {
                        "$ref": "#/parameters/collectionIdParam"
                    },
                    {
                        "$ref": "#/parameters/versionParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection fetched",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/environments/{environment_id}/collections/{collection_id}/documents/{document_id}": {
            "get": {
                "summary": "List document details",
                "description": "Fetch status details about a submitted document. **Note:** this operation does not return the document itself. Instead, it only returns the document's processing status, and any notices (warnings or errors) that were generated when the document was ingested. Use the Query API to fetch the actual document content.\n",
                "tags": [
                    "Documents"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/environmentIdParam"
                    },
                    {
                        "$ref": "#/parameters/collectionIdParam"
                    },
                    {
                        "$ref": "#/parameters/documentIdParam"
                    },
                    {
                        "$ref": "#/parameters/versionParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched document details.",
                        "schema": {
                            "$ref": "#/definitions/DocumentStatus"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. Returned if you attempt to get the status of a document in a collection in a read only environment.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/environments/{environment_id}/collections/{collection_id}/fields": {
            "get": {
                "summary": "List unique fields",
                "description": "Gets a list of the the unique fields (and their types) stored in the index.\n",
                "tags": [
                    "Collections"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/environmentIdParam"
                    },
                    {
                        "$ref": "#/parameters/collectionIdParam"
                    },
                    {
                        "$ref": "#/parameters/versionParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of fetched fields.\n\nThe fields are returned using a fully-qualified name format, however, the format differs slightly from that used by the query operations. Specifically:\n  \n  * fields which contain nested JSON objects are assigned a type of \"nested\".\n  \n  * fields which belong to a nested object are prefixed with `.properties` (e.g., `warnings.properties.severity` means that the `warnings` object has a property called `severity`).\n  \n  * fields returned from the News collection are prefixed with `v[N]-fullnews-t3-[YEAR].mappings` (e.g., `v5-fullnews-t3-2016.mappings.text.properties.author`).\n  \n",
                        "schema": {
                            "$ref": "#/definitions/GetFieldsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/environments/{environment_id}/collections/{collection_id}/query": {
            "get": {
                "summary": "Query documents",
                "description": "See the [Query Language wiki page](https://github.ibm.com/Watson-Discovery/discovery-wiki/blob/master/design/query-language.md) for more details.\n",
                "tags": [
                    "Queries"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/environmentIdParam"
                    },
                    {
                        "$ref": "#/parameters/collectionIdParam"
                    },
                    {
                        "$ref": "#/parameters/filterParam"
                    },
                    {
                        "$ref": "#/parameters/queryParam"
                    },
                    {
                        "$ref": "#/parameters/aggregationParam"
                    },
                    {
                        "$ref": "#/parameters/countParam"
                    },
                    {
                        "$ref": "#/parameters/returnParam"
                    },
                    {
                        "$ref": "#/parameters/offsetParam"
                    },
                    {
                        "$ref": "#/parameters/versionParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query executed successfully.",
                        "schema": {
                            "$ref": "#/definitions/QueryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Environment": {
            "type": "object",
            "properties": {
                "environment_id": {
                    "type": "string",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "default": "",
                    "minLength": 0,
                    "maxLength": 255
                },
                "description": {
                    "type": "string",
                    "default": ""
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "status": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "active",
                        "pending"
                    ]
                },
                "read_only": {
                    "type": "boolean",
                    "readOnly": true,
                    "description": "If true, then the environment contains read-only collections which are maintained by IBM."
                },
                "size": {
                    "type": "number",
                    "format": "int32",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "default": 1
                },
                "index_capacity": {
                    "$ref": "#/definitions/IndexCapacity"
                }
            },
            "example": {
                "environment_id": "2cd8bc72-d737-46e3-b26b-05a58546ae32",
                "name": "test_environment",
                "description": "Test environment\"",
                "created": "2016-11-21T14:50:57.898Z",
                "updated": "2016-11-21T14:50:57.898Z",
                "status": "active",
                "read_only": false,
                "index_capacity": {
                    "disk_usage": {
                        "used_bytes": 318,
                        "total_bytes": 2147483648,
                        "used": "0.31 KB",
                        "total": "2 GB",
                        "percent_used": 0.01
                    },
                    "memory_usage": {
                        "used_bytes": 264536200,
                        "total_bytes": 518979584,
                        "used": "252.28 MB",
                        "total": "494.94 MB",
                        "percent_used": 50.97
                    }
                }
            }
        },
        "IndexCapacity": {
            "type": "object",
            "properties": {
                "disk_usage": {
                    "$ref": "#/definitions/DiskUsage"
                },
                "memory_usage": {
                    "$ref": "#/definitions/MemoryUsage"
                }
            }
        },
        "DiskUsage": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "used_bytes": {
                    "type": "integer",
                    "readOnly": true
                },
                "total_bytes": {
                    "type": "integer",
                    "readOnly": true
                },
                "used": {
                    "type": "string",
                    "readOnly": true
                },
                "total": {
                    "type": "string",
                    "readOnly": true
                },
                "percent_used": {
                    "type": "number",
                    "format": "double",
                    "readOnly": true
                }
            }
        },
        "MemoryUsage": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "used_bytes": {
                    "type": "integer",
                    "readOnly": true
                },
                "total_bytes": {
                    "type": "integer",
                    "readOnly": true
                },
                "used": {
                    "type": "string",
                    "readOnly": true
                },
                "total": {
                    "type": "string",
                    "readOnly": true
                },
                "percent_used": {
                    "type": "number",
                    "format": "double",
                    "readOnly": true
                }
            }
        },
        "AddEnvironmentRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "default": "",
                    "minLength": 0,
                    "maxLength": 255
                },
                "description": {
                    "type": "string",
                    "default": ""
                },
                "size": {
                    "type": "number",
                    "format": "int32",
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "default": 1
                }
            }
        },
        "UpdateEnvironmentRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "default": "",
                    "minLength": 0,
                    "maxLength": 255
                },
                "description": {
                    "type": "string",
                    "default": ""
                }
            }
        },
        "GetEnvironmentsResponse": {
            "type": "object",
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Environment"
                    }
                }
            }
        },
        "DeleteEnvironmentResponse": {
            "type": "object",
            "required": [
                "environment_id",
                "status"
            ],
            "properties": {
                "environment_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "deleted"
                    ]
                }
            }
        },
        "GetCollectionsResponse": {
            "type": "object",
            "properties": {
                "collections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CollectionRef"
                    }
                }
            },
            "example": {
                "collections": [
                    {
                        "collection_id": "f1360220-ea2d-4271-9d62-89a910b13c37",
                        "name": "example",
                        "description": "this is a demo collection",
                        "created": "2015-08-24T18:42:25.324Z",
                        "updated": "2015-08-24T18:42:25.324Z",
                        "status": "active",
                        "configuration_id": "6963be41-2dea-4f79-8f52-127c63c479b0",
                        "language": "en_us"
                    }
                ]
            }
        },
        "AddCollectionRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "default": "",
                    "minLength": 0,
                    "maxLength": 255
                },
                "description": {
                    "type": "string",
                    "default": ""
                },
                "configuration_id": {
                    "type": "string",
                    "default": ""
                }
            }
        },
        "UpdateCollectionRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "default": "",
                    "minLength": 0,
                    "maxLength": 255
                },
                "description": {
                    "type": "string",
                    "default": ""
                },
                "configuration_id": {
                    "type": "string",
                    "default": ""
                }
            }
        },
        "DeleteCollectionResponse": {
            "type": "object",
            "required": [
                "collection_id",
                "status"
            ],
            "properties": {
                "collection_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "deleted"
                    ]
                }
            }
        },
        "CollectionRef": {
            "type": "object",
            "properties": {
                "collection_id": {
                    "type": "string",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 255
                },
                "description": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "status": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "active",
                        "pending"
                    ]
                },
                "configuration_id": {
                    "type": "string"
                }
            }
        },
        "Collection": {
            "type": "object",
            "properties": {
                "collection_id": {
                    "type": "string",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 255
                },
                "description": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "status": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "active",
                        "pending"
                    ]
                },
                "configuration_id": {
                    "type": "string"
                },
                "document_counts": {
                    "$ref": "#/definitions/DocumentCounts"
                }
            },
            "example": {
                "collection_id": "f1360220-ea2d-4271-9d62-89a910b13c37",
                "name": "democollection",
                "description": "this is a demo collection",
                "created": "2015-08-24T18:42:25.324Z",
                "updated": "2015-08-24T18:42:25.324Z",
                "status": "active",
                "configuration_id": "6963be41-2dea-4f79-8f52-127c63c479b0",
                "language": "en_us",
                "document_counts": {
                    "available": 1000,
                    "processing": 20,
                    "failed": 180
                }
            }
        },
        "DocumentCounts": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "available": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "processing": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "failed": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                }
            }
        },
        "Configuration": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "configuration_id": {
                    "type": "string",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "default": "",
                    "minLength": 0,
                    "maxLength": 255
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "description": {
                    "type": "string"
                },
                "conversions": {
                    "$ref": "#/definitions/Conversions"
                },
                "enrichments": {
                    "$ref": "#/definitions/Enrichments"
                },
                "normalizations": {
                    "$ref": "#/definitions/Normalizations"
                }
            },
            "example": {
                "configuration_id": "448e3545-51ca-4530-a03b-6ff282ceac2e",
                "name": "IBM News",
                "created": "2015-08-24T18:42:25.324Z",
                "updated": "2015-08-24T18:42:25.324Z",
                "description": "A configuration useful for ingesting IBM press releases.",
                "conversions": {
                    "html": {
                        "exclude_tags_keep_content": [
                            "span"
                        ],
                        "exclude_content": {
                            "xpaths": [
                                "/home"
                            ]
                        }
                    },
                    "json_normalizations": [
                        {
                            "operation": "move",
                            "source_field": "extracted_metadata.title",
                            "destination_field": "metadata.title"
                        },
                        {
                            "operation": "move",
                            "source_field": "extracted_metadata.author",
                            "destination_field": "metadata.author"
                        },
                        {
                            "operation": "remove",
                            "source_field": "extracted_metadata"
                        }
                    ]
                },
                "normalizations": [
                    {
                        "operation": "move",
                        "source_field": "metadata.title",
                        "destination_field": "title"
                    },
                    {
                        "operation": "move",
                        "source_field": "metadata.author",
                        "destination_field": "author"
                    },
                    {
                        "operation": "move",
                        "source_field": "alchemy_enriched_text.language",
                        "destination_field": "language"
                    },
                    {
                        "operation": "remove",
                        "source_field": "html"
                    },
                    {
                        "operation": "remove",
                        "source_field": "alchemy_enriched_text.status"
                    },
                    {
                        "operation": "remove",
                        "source_field": "alchemy_enriched_text.text"
                    },
                    {
                        "operation": "remove",
                        "source_field": "sire_enriched_text.language"
                    },
                    {
                        "operation": "remove",
                        "source_field": "sire_enriched_text.model"
                    },
                    {
                        "operation": "remove",
                        "source_field": "sire_enriched_text.status"
                    },
                    {
                        "operation": "remove_nulls"
                    }
                ]
            }
        },
        "NewConfiguration": {
            "allOf": [
                {
                    "$ref": "#/definitions/Configuration"
                }
            ],
            "example": {
                "name": "give the configuration a human-readable name",
                "description": "describe how you intend to use this configuration",
                "conversions": {
                    "word": {
                        "heading": {
                            "fonts": [
                                {
                                    "level": 1,
                                    "min_size": 24,
                                    "bold": false,
                                    "italic": false
                                },
                                {
                                    "level": 2,
                                    "min_size": 18,
                                    "max_size": 23,
                                    "bold": true,
                                    "italic": false
                                },
                                {
                                    "level": 3,
                                    "min_size": 14,
                                    "max_size": 17,
                                    "bold": false,
                                    "italic": false
                                },
                                {
                                    "level": 4,
                                    "min_size": 13,
                                    "max_size": 13,
                                    "bold": true,
                                    "italic": false
                                }
                            ],
                            "styles": [
                                {
                                    "level": 1,
                                    "names": [
                                        "pullout heading",
                                        "pulloutheading",
                                        "header"
                                    ]
                                },
                                {
                                    "level": 2,
                                    "names": [
                                        "subtitle"
                                    ]
                                }
                            ]
                        }
                    },
                    "pdf": {
                        "heading": {
                            "fonts": [
                                {
                                    "level": 1,
                                    "min_size": 24,
                                    "max_size": 80
                                },
                                {
                                    "level": 2,
                                    "min_size": 18,
                                    "max_size": 24,
                                    "bold": false,
                                    "italic": false
                                },
                                {
                                    "level": 2,
                                    "min_size": 18,
                                    "max_size": 24,
                                    "bold": true
                                },
                                {
                                    "level": 3,
                                    "min_size": 13,
                                    "max_size": 18,
                                    "bold": false,
                                    "italic": false
                                },
                                {
                                    "level": 3,
                                    "min_size": 13,
                                    "max_size": 18,
                                    "bold": true
                                },
                                {
                                    "level": 4,
                                    "min_size": 11,
                                    "max_size": 13,
                                    "bold": false,
                                    "italic": false
                                }
                            ]
                        }
                    },
                    "html": {
                        "exclude_tags_completely": [
                            "script",
                            "sup"
                        ],
                        "exclude_tags_keep_content": [
                            "font",
                            "em",
                            "span"
                        ],
                        "exclude_content": {
                            "xpaths": []
                        },
                        "keep_content": {
                            "xpaths": []
                        },
                        "exclude_tag_attributes": [
                            "EVENT_ACTIONS"
                        ]
                    },
                    "json_normalizations": []
                },
                "normalizations": []
            }
        },
        "Conversions": {
            "type": "object",
            "properties": {
                "pdf": {
                    "$ref": "#/definitions/PdfSettings"
                },
                "word": {
                    "$ref": "#/definitions/WordSettings"
                },
                "html": {
                    "$ref": "#/definitions/HtmlSettings"
                },
                "json_normalizations": {
                    "$ref": "#/definitions/Normalizations"
                }
            }
        },
        "PdfSettings": {
            "type": "object",
            "properties": {
                "heading": {
                    "$ref": "#/definitions/PdfHeadingDetection"
                }
            }
        },
        "PdfHeadingDetection": {
            "type": "object",
            "properties": {
                "fonts": {
                    "$ref": "#/definitions/FontSettings"
                }
            }
        },
        "WordSettings": {
            "type": "object",
            "properties": {
                "heading": {
                    "$ref": "#/definitions/WordHeadingDetection"
                }
            }
        },
        "WordHeadingDetection": {
            "type": "object",
            "properties": {
                "fonts": {
                    "$ref": "#/definitions/FontSettings"
                },
                "styles": {
                    "$ref": "#/definitions/WordStyles"
                }
            }
        },
        "WordStyles": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/WordStyle"
            }
        },
        "WordStyle": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "number",
                    "format": "integer"
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "HtmlSettings": {
            "type": "object",
            "properties": {
                "exclude_tags_completely": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exclude_tags_keep_content": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "keep_content": {
                    "$ref": "#/definitions/XPathPatterns"
                },
                "exclude_content": {
                    "$ref": "#/definitions/XPathPatterns"
                },
                "keep_tag_attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exclude_tag_attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "XPathPatterns": {
            "type": "object",
            "properties": {
                "xpaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FontSettings": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/FontSetting"
            }
        },
        "FontSetting": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "number",
                    "format": "integer"
                },
                "min_size": {
                    "type": "number",
                    "format": "integer"
                },
                "max_size": {
                    "type": "number",
                    "format": "integer"
                },
                "bold": {
                    "type": "boolean"
                },
                "italic": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Normalizations": {
            "description": "Defines operations that can be used to transform the final output JSON into a normalized form. Operations are executed in the order that they appear in the array.\n",
            "type": "array",
            "items": {
                "$ref": "#/definitions/NormalizationOperation"
            }
        },
        "NormalizationOperation": {
            "type": "object",
            "properties": {
                "operation": {
                    "description": "Identifies what type of operation to perform. \n\n**copy** - Copies the value of the `source_field` to the `destination_field` field. If the `destination_field` already exists, then the value of the `source_field` overwrites the original value of the `destination_field`. \n\n**move** - Renames (moves) the `source_field` to the `destination_field`. If the `destination_field` already exists, then the value of the `source_field` overwrites the original value of the `destination_field`. Rename is identical to copy, except that the `source_field` is removed after the value has been copied to the `destination_field` (it is the same as a _copy_ followed by a _remove_). \n\n**merge** - Merges the value of the `source_field` with the value of the `destination_field`. The `destination_field` is converted into an array if it is not already an array, and the value of the `source_field` is appended to the array. This operation removes the `source_field` after the merge. If the `source_field` does not exist in the current document, then the `destination_field` is still converted into an array (if it is not an array already). This is ensures the type for `destination_field` is consistent across all documents. \n\n**remove** - Deletes the `source_field` field. The `destination_field` is ignored for this operation. \n\n**remove_nulls** - Removes all nested null (blank) leif values from the JSON tree. `source_field` and `destination_field` are ignored by this operation because _remove_nulls_ operates on the entire JSON tree. Typically, `remove_nulls` is invoked as the last normalization operation (if it is inoked at all, it can be time-expensive).\n",
                    "type": "string",
                    "enum": [
                        "copy",
                        "move",
                        "merge",
                        "remove",
                        "remove_nulls"
                    ]
                },
                "source_field": {
                    "type": "string"
                },
                "destination_field": {
                    "type": "string"
                }
            }
        },
        "GetConfigurationsResponse": {
            "type": "object",
            "properties": {
                "configurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConfigurationRef"
                    }
                }
            }
        },
        "ConfigurationRef": {
            "type": "object",
            "properties": {
                "configuration_id": {
                    "type": "string",
                    "readOnly": true
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 255
                },
                "description": {
                    "type": "string"
                }
            },
            "example": {
                "configuration_id": "448e3545-51ca-4530-a03b-6ff282ceac2e",
                "name": "democonfig",
                "description": "this is a demo configuration",
                "created": "2015-08-24T18:42:25.324Z",
                "updated": "2015-08-24T18:42:25.324Z"
            }
        },
        "DeleteConfigurationResponse": {
            "type": "object",
            "required": [
                "configuration_id",
                "status"
            ],
            "properties": {
                "configuration_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "deleted"
                    ]
                },
                "notices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Notice"
                    }
                }
            },
            "example": {
                "configuration_id": "123abc",
                "status": "deleted",
                "notices": [
                    {
                        "notice_id": "configuration_in_use",
                        "created": "2016-09-28T12:34:00.000Z",
                        "severity": "warning",
                        "description": "The configuration was deleted, but it is referenced by one or more collections."
                    }
                ]
            }
        },
        "DocumentAccepted": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "processing"
                    ]
                }
            },
            "example": {
                "document_id": "f1360220-ea2d-4271-9d62-89a910b13c37",
                "status": "processing"
            }
        },
        "DeleteDocumentResponse": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "deleted"
                    ]
                }
            }
        },
        "DocumentStatus": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "string"
                },
                "configuration_id": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "updated": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "available",
                        "available with notices",
                        "failed",
                        "processing"
                    ]
                },
                "status_description": {
                    "type": "string"
                },
                "notices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Notice"
                    }
                }
            },
            "example": {
                "document_id": "f1360220-ea2d-4271-9d62-89a910b13c37",
                "configuration_id": "e8b9d793-b163-452a-9373-bce07efb510b",
                "created": "2015-08-24T18:42:25.324Z",
                "updated": "2015-08-24T18:42:25.324Z",
                "status": "available",
                "notices": [
                    {
                        "notice_id": "index_342",
                        "severity": "warning",
                        "step": "indexing",
                        "description": "something bad happened"
                    }
                ]
            }
        },
        "TestDocument": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "configuration_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "enriched_field_units": {
                    "type": "number",
                    "format": "integer",
                    "description": "The number of 10 Kilobytes of field data that was enriched. This can be used to estimate the cost of running a real ingestion."
                },
                "original_media_type": {
                    "type": "string"
                },
                "snapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DocumentSnapshot"
                    }
                },
                "notices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Notice"
                    }
                }
            },
            "example": {
                "configuration_id": "e8b9d793-b163-452a-9373-bce07efb510b",
                "status": "completed",
                "enriched_field_units": 5,
                "original_media_type": "text/html",
                "snapshots": [
                    {
                        "step": "html_input",
                        "snapshot": {
                            "html": "<html><head><title>IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations</title><meta name=\"author\" content=\"Jake Bake\"></head><body><p><span>Mr. Rhodin will lead the IBM Watson Group,<span>a new IBM business unit headquartered in the heart of New York City's Silicon Alley</span> that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.</span></p></body></html>"
                        }
                    },
                    {
                        "step": "html_output",
                        "snapshot": {
                            "html": "<?xml version='1.0' encoding='UTF-8' standalone='yes'?><html><head><title>IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations</title><meta name=\"author\" content=\"Jake Bake\"/></head><body><p>Mr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.</p></body></html>"
                        }
                    },
                    {
                        "step": "json_output",
                        "snapshot": {
                            "text": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations\n\nMr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.",
                            "html": "<?xml version='1.0' encoding='UTF-8' standalone='yes'?><html><head><title>IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations</title><meta name=\"author\" content=\"Jake Bake\"/></head><body><p>Mr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.</p></body></html>",
                            "metadata": {
                                "title": "Press Release 2014-01-09",
                                "category": "news"
                            },
                            "extracted_metadata": {
                                "title": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations",
                                "author": "Jake Bake"
                            }
                        }
                    },
                    {
                        "step": "json_normalizations_output",
                        "snapshot": {
                            "text": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations\n\nMr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.",
                            "html": "<?xml version='1.0' encoding='UTF-8' standalone='yes'?><html><head><title>IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations</title><meta name=\"author\" content=\"Jake Bake\"/></head><body><p>Mr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.</p></body></html>",
                            "metadata": {
                                "title": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations",
                                "author": "Jake Bake",
                                "category": "news"
                            }
                        }
                    },
                    {
                        "step": "enrichments_output",
                        "snapshot": {
                            "html": "<?xml version='1.0' encoding='UTF-8' standalone='yes'?><html><head><title>IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations</title><meta name=\"author\" content=\"Jake Bake\"/></head><body><p>Mr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.</p></body></html>",
                            "text": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations\n\nMr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.",
                            "metadata": {
                                "title": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations",
                                "author": "Jake Bake",
                                "category": "news"
                            },
                            "alchemy_enriched_text": {
                                "status": "OK",
                                "language": "english",
                                "text": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations\n\nMr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.",
                                "keywords": [
                                    {
                                        "relevance": 0.978167,
                                        "text": "IBM Watson Group"
                                    },
                                    {
                                        "relevance": 0.932488,
                                        "text": "cloud-based cognitive apps"
                                    },
                                    {
                                        "relevance": 0.838797,
                                        "text": "IBM business unit"
                                    },
                                    {
                                        "relevance": 0.830576,
                                        "text": "New York City"
                                    },
                                    {
                                        "relevance": 0.736028,
                                        "text": "Silicon Alley"
                                    },
                                    {
                                        "relevance": 0.67098,
                                        "text": "Title sample"
                                    },
                                    {
                                        "relevance": 0.648253,
                                        "text": "Mr. Rhodin"
                                    },
                                    {
                                        "relevance": 0.49768,
                                        "text": "start-ups"
                                    },
                                    {
                                        "relevance": 0.433437,
                                        "text": "heart"
                                    },
                                    {
                                        "relevance": 0.432563,
                                        "text": "products"
                                    }
                                ]
                            },
                            "sire_enriched_text": {
                                "status": "OK",
                                "language": "english",
                                "model": "ie-en-news",
                                "typedRelations": [
                                    {
                                        "arguments": [
                                            {
                                                "entities": [
                                                    {
                                                        "id": "-E3",
                                                        "text": "Silicon Alley",
                                                        "type": "GeopoliticalEntity"
                                                    }
                                                ],
                                                "part": "first",
                                                "text": "Silicon Alley"
                                            },
                                            {
                                                "entities": [
                                                    {
                                                        "id": "-E2",
                                                        "text": "New York City",
                                                        "type": "GeopoliticalEntity"
                                                    }
                                                ],
                                                "part": "second",
                                                "text": "New York City"
                                            }
                                        ],
                                        "score": "0.898437",
                                        "sentence": "Mr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.",
                                        "type": "locatedAt"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "step": "normalizations_output",
                        "snapshot": {
                            "title": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations",
                            "author": "Jake Bake",
                            "language": "english",
                            "text": "IBM Forms New Watson Group to Meet Growing Demand for Cognitive Innovations\n\nMr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.",
                            "alchemy_enriched_text": {
                                "keywords": [
                                    {
                                        "relevance": 0.978167,
                                        "text": "IBM Watson Group"
                                    },
                                    {
                                        "relevance": 0.932488,
                                        "text": "cloud-based cognitive apps"
                                    },
                                    {
                                        "relevance": 0.838797,
                                        "text": "IBM business unit"
                                    },
                                    {
                                        "relevance": 0.830576,
                                        "text": "New York City"
                                    },
                                    {
                                        "relevance": 0.736028,
                                        "text": "Silicon Alley"
                                    },
                                    {
                                        "relevance": 0.67098,
                                        "text": "Title sample"
                                    },
                                    {
                                        "relevance": 0.648253,
                                        "text": "Mr. Rhodin"
                                    },
                                    {
                                        "relevance": 0.49768,
                                        "text": "start-ups"
                                    },
                                    {
                                        "relevance": 0.433437,
                                        "text": "heart"
                                    },
                                    {
                                        "relevance": 0.432563,
                                        "text": "products"
                                    }
                                ]
                            },
                            "sire_enriched_text": {
                                "typedRelations": [
                                    {
                                        "arguments": [
                                            {
                                                "entities": [
                                                    {
                                                        "id": "-E3",
                                                        "text": "Silicon Alley",
                                                        "type": "GeopoliticalEntity"
                                                    }
                                                ],
                                                "part": "first",
                                                "text": "Silicon Alley"
                                            },
                                            {
                                                "entities": [
                                                    {
                                                        "id": "-E2",
                                                        "text": "New York City",
                                                        "type": "GeopoliticalEntity"
                                                    }
                                                ],
                                                "part": "second",
                                                "text": "New York City"
                                            }
                                        ],
                                        "score": "0.898437",
                                        "sentence": "Mr. Rhodin will lead the IBM Watson Group, a new IBM business unit headquartered in the heart of New York City's Silicon Alley that will develop products and collaborate with start-ups on cloud-based cognitive apps and services powered by Watson.",
                                        "type": "locatedAt"
                                    }
                                ]
                            }
                        }
                    }
                ],
                "notices": [
                    {
                        "notice_id": "xpath_not_found",
                        "severity": "warning",
                        "step": "html-to-html",
                        "description": "xpath '/home' not found"
                    }
                ]
            }
        },
        "DocumentSnapshot": {
            "type": "object",
            "properties": {
                "step": {
                    "type": "string",
                    "enum": [
                        "html_input",
                        "html_output",
                        "json_output",
                        "json_normalizations_output",
                        "enrichments_output",
                        "normalizations_output"
                    ]
                },
                "snapshot": {
                    "type": "object"
                }
            }
        },
        "GetFieldsResponse": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            },
            "example": {
                "fields": [
                    {
                        "field": "warnings",
                        "type": "nested"
                    },
                    {
                        "field": "warnings.properties.description",
                        "type": "string"
                    },
                    {
                        "field": "warnings.properties.phase",
                        "type": "string"
                    },
                    {
                        "field": "warnings.properties.warning_id",
                        "type": "string"
                    }
                ]
            }
        },
        "Field": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "field": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "nested",
                        "string",
                        "date",
                        "long",
                        "integer",
                        "short",
                        "byte",
                        "double",
                        "float",
                        "boolean",
                        "binary"
                    ]
                }
            }
        },
        "QueryResponse": {
            "type": "object",
            "properties": {
                "matching_results": {
                    "type": "number",
                    "format": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QueryResult"
                    }
                },
                "aggregations": {
                    "$ref": "#/definitions/QueryAggregation"
                }
            },
            "example": {
                "matching_results": 24,
                "results": [
                    {
                        "id": "watson-generated ID",
                        "score": 1
                    }
                ],
                "aggregations": {
                    "term": {
                        "results": [
                            {
                                "key": "active",
                                "matching_results": 34
                            }
                        ]
                    }
                }
            }
        },
        "QueryResult": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "score": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "QueryAggregation": {
            "type": "object",
            "properties": {
                "term": {
                    "$ref": "#/definitions/AggregationTerm"
                }
            }
        },
        "AggregationTerm": {
            "type": "object",
            "properties": {
                "results": {
                    "$ref": "#/definitions/AggregationResult"
                }
            }
        },
        "AggregationResult": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "matching_results": {
                    "type": "number",
                    "format": "integer"
                }
            }
        },
        "Notice": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "notice_id": {
                    "type": "string",
                    "description": "Identifies the notice. Many notices may have the same ID. This field exists so that user applications can programatically identify a notice and take automatic corrective action."
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "document_id": {
                    "type": "string"
                },
                "severity": {
                    "type": "string",
                    "enum": [
                        "warning",
                        "error"
                    ]
                },
                "step": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "required": [
                "code",
                "error"
            ],
            "properties": {
                "code": {
                    "description": "the HTTP error status code",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 100,
                    "maximum": 600
                },
                "error": {
                    "description": "a message describing the error",
                    "type": "string"
                }
            }
        }
    },
    "parameters": {
        "versionParam": {
            "name": "version",
            "in": "query",
            "description": "a date (`YYYY-MM-DD`) that identifies the specific version of the API to use when processing the request",
            "required": true,
            "type": "string",
            "format": "date",
            "default": "2016-12-01",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
        },
        "environmentIdParam": {
            "name": "environment_id",
            "in": "path",
            "description": "the ID of your environment",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9_-]*$"
        },
        "collectionIdParam": {
            "name": "collection_id",
            "in": "path",
            "description": "the ID of your collection",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9_-]*$"
        },
        "configurationIdParam": {
            "name": "configuration_id",
            "in": "path",
            "description": "the ID of your configuration",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9_-]*$"
        },
        "documentIdParam": {
            "name": "document_id",
            "in": "path",
            "description": "the ID of your document",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9_-]*$"
        },
        "configurationIdQueryParam": {
            "name": "configuration_id",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The ID of the configuration to use to process the document. If the `configuration` form part is also provided (both are present at the same time), then request will be rejected."
        },
        "filePart": {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "The content of the document to ingest.The maximum supported file size is 50 megabytes. Files larger than 50 megabytes is rejected.\n"
        },
        "metadataPart": {
            "name": "metadata",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If you're using the Data Crawler to upload your documents, you can test a document against the type of metadata that the Data Crawler might send. The maximum supported metadata file size is 1 MB. Metadata parts larger than 1 MB are rejected.\nExample:  ``` {\n  \"Creator\": \"Johnny Appleseed\",\n  \"Subject\": \"Apples\"\n} ```\n"
        },
        "configurationPart": {
            "name": "configuration",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The configuration to use to process the document. If this part is provided, then the provided configuration is used to process the document. If the `configuration_id` is also provided (both are present at the same time), then request is rejected. The maximum supported configuration size is 1 MB. Configuration parts larger than 1 MB are rejected.\nSee the `GET /configurations/{configuration_id}` operation for an example configuration.\n"
        },
        "filterParam": {
            "name": "filter",
            "in": "query",
            "type": "string",
            "description": "A cacheable query that limits the documents returned to exclude any documents that don't mention the query content. Filter searches are better for metadata type searches and when you are trying to get a sense of concepts in the data set.\n"
        },
        "queryParam": {
            "name": "query",
            "in": "query",
            "type": "string",
            "description": "A query search returns all documents in your data set with full enrichments and full text, but with the most relevant documents listed first. Use a query search when you want to find the most relevant search results."
        },
        "aggregationParam": {
            "name": "aggregation",
            "in": "query",
            "type": "string",
            "description": "An aggregation search uses combinations of filters and query search to return an exact answer. Aggregations are useful for building applications, because you can use them to build lists, tables, and time series. For a full list of possible aggregrations, see the Query reference.\n"
        },
        "countParam": {
            "name": "count",
            "in": "query",
            "type": "integer",
            "default": 10,
            "description": "Number of documents to return\n"
        },
        "returnParam": {
            "name": "return",
            "in": "query",
            "type": "string",
            "description": "A comma separated list of the portion of the document hierarchy to return.\n"
        },
        "offsetParam": {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "description": "The number of query results to skip at the beginning. For example, if the total number of results that are returned is 10, and the offset is 8, it returns the last two results.\n"
        }
    }
}