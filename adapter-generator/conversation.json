{
  "swagger": "2.0",
  "basePath": "/conversation/api",
  "info": {
    "version": "1.0",
    "title": "Conversation service",
    "description": "The IBM Watson&trade; Conversation service"
  },
  "securityDefinitions": {},
  "security": [],
  "externalDocs": {
    "description": "For more information about this service, see the documentation:",
    "url": "http://www.ibm.com/watson/developercloud/doc/conversation"
  },
  "schemes": [
    "http",
    "https"
  ],
  "tags": [
    {
      "name": "Workspaces"
    },
    {
      "name": "Message"
    }
  ],
  "paths": {
    "/v1/workspaces": {
      "parameters": [
        {
          "$ref": "#/parameters/VersionQueryParam"
        }
      ],
      "post": {
        "summary": "Create workspace",
        "description": "",
        "tags": [
          "Workspaces"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Valid JSON data defining the content of the new workspace.",
            "schema": {
              "$ref": "#/definitions/CreateWorkspace"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/WorkspaceResponse"
            },
            "description": "Successful request",
            "examples": {
              "application/json": {
                "name": "Pizza app",
                "created": "2015-12-06T23:53:59.153Z",
                "language": "en",
                "metadata": {},
                "updated": "2015-12-06T23:53:59.153Z",
                "description": "Pizza app",
                "workspace_id": "pizza_app-e0f3"
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Invalid request"
          }
        }
      },
      "get": {
        "summary": "List workspaces",
        "description": "",
        "tags": [
          "Workspaces"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/WorkspaceCollectionResponse"
            },
            "description": "Successful request",
            "examples": {
              "application/json": {
                "workspaces": [
                  {
                    "name": "Pizza app",
                    "created": "2015-12-06T23:53:59.153Z",
                    "language": "en",
                    "metadata": {},
                    "updated": "2015-12-06T23:53:59.153Z",
                    "description": "Pizza app",
                    "workspace_id": "pizza_app-e0f3"
                  }
                ]
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Invalid request"
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}": {
      "parameters": [
        {
          "$ref": "#/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "summary": "Get information about a workspace",
        "description": "",
        "tags": [
          "Workspaces"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ExportQueryParam"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/WorkspaceExportResponse"
            },
            "description": "Successful request",
            "examples": {
              "application/json": {
                "name": "Pizza app",
                "created": "2015-12-06T23:53:59.153Z",
                "language": "en",
                "metadata": {},
                "updated": "2015-12-06T23:53:59.153Z",
                "description": "Pizza app",
                "status": "Available",
                "workspace_id": "pizza_app-e0f3"
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Invalid request"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          }
        }
      },
      "post": {
        "summary": "Update workspace",
        "description": "",
        "tags": [
          "Workspaces"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Valid JSON data defining the new workspace content. Any elements included in the new JSON will completely replace the existing elements, including all subelements. Previously existing subelements are not retained unless they are included in the new JSON.",
            "schema": {
              "$ref": "#/definitions/UpdateWorkspace"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/WorkspaceResponse"
            },
            "description": "Successful request",
            "examples": {
              "application/json": {
                "name": "Pizza app",
                "created": "2015-12-06T23:53:59.153Z",
                "language": "en",
                "metadata": {},
                "updated": "2015-12-06T23:53:59.153Z",
                "description": "Pizza app",
                "workspace_id": "pizza_app-e0f3"
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Invalid request"
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/message": {
      "post": {
        "summary": "Get a response to a user's input",
        "description": "",
        "tags": [
          "Message"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "type": "string",
            "default": "0a0c06c1-8e31-4655-9067-58fcac5134fc",
            "description": "Unique identifier of the workspace."
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "default": "2016-09-20",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "type": "string",
            "description": "Release date of the API version in YYYY-MM-DD format."
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "The user's input, with optional intents, entities, and other properties from the response.",
            "schema": {
              "$ref": "#/definitions/MessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            },
            "examples": {
              "application/json": {
                "input": {
                  "text": "Turn on the lights"
                },
                "alternate_intents": true,
                "context": {
                  "conversation_id": "1b7b67c0-90ed-45dc-8508-9488bc483d5b",
                  "system": {
                    "dialog_stack": [
                      {
                        "dialog_node": "root"
                      }
                    ],
                    "dialog_turn_counter": 2,
                    "dialog_request_counter": 2
                  }
                },
                "entities": [
                  {
                    "entity": "appliance",
                    "location": [
                      12,
                      18
                    ],
                    "value": "light"
                  }
                ],
                "intents": [
                  {
                    "intent": "turn_on",
                    "confidence": 0.9743563172970104
                  },
                  {
                    "intent": "turn_up",
                    "confidence": 0.024898449095231066
                  },
                  {
                    "intent": "out_of_scope",
                    "confidence": 0.00074523360776
                  }
                ],
                "output": {
                  "log_messages": [
                    {
                      "level": "warn",
                      "msg": "No dialog node matched for the input at a root level!"
                    }
                  ],
                  "text": [
                    "Ok. Turning on the light"
                  ],
                  "nodes_visited": [
                    "node_1_1467232431348",
                    "node_2_1467232480480",
                    "node_4_1467232602708"
                  ]
                }
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Invalid request"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Resource not found"
          }
        }
      }
    }
  },
  "parameters": {
    "ExportQueryParam": {
      "in": "query",
      "name": "export",
      "required": false,
      "default": false,
      "type": "boolean",
      "description": "Whether to include all workspace content (such as intents, entities, and dialog nodes) in the exported data. If export=false, the exported data includes only information about the workspace itself (such as the workspace name, description, language, and workspace ID)."
    },
    "VersionQueryParam": {
      "in": "query",
      "name": "version",
      "required": true,
      "default": "2016-09-20",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
      "type": "string",
      "description": "Release date of the API version in YYYY-MM-DD format."
    },
    "WorkspacePathParam": {
      "in": "path",
      "name": "workspace_id",
      "required": true,
      "default": "0a0c06c1-8e31-4655-9067-58fcac5134fc",
      "type": "string",
      "description": "The workspace ID."
    }
  },
  "definitions": {
    "BaseWorkspace": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the workspace."
        },
        "description": {
          "type": "string",
          "description": "The description of the workspace."
        },
        "language": {
          "type": "string",
          "description": "The language of the workspace."
        },
        "metadata": {
          "type": "object",
          "description": "Any metadata that is required by the workspace."
        }
      }
    },
    "Context": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string"
        },
        "system": {
          "$ref": "#/definitions/SystemResponse"
        }
      }
    },
    "CounterexampleCollection": {
      "properties": {
        "counterexamples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExampleResponse"
          },
          "description": "An array of CounterExample collection."
        }
      }
    },
    "CreateDialogNode": {
      "properties": {
        "dialog_node": {
          "type": "string",
          "description": "The dialog node ID."
        },
        "description": {
          "type": "string",
          "description": "The description of the dialog node."
        },
        "conditions": {
          "type": "string",
          "description": "The condition that will trigger the dialog node."
        },
        "parent": {
          "type": "string",
          "description": "The parent dialog node."
        },
        "previous_sibling": {
          "type": "string",
          "description": "The previous dialog node."
        },
        "output": {
          "$ref": "#/definitions/DialogNodeOutput"
        },
        "context": {
          "type": "object",
          "description": "The context for the dialog node."
        },
        "metadata": {
          "type": "object",
          "description": "The metadata for the dialog node."
        },
        "go_to": {
          "$ref": "#/definitions/DialogNodeGoTo"
        }
      },
      "required": [
        "dialog_node"
      ]
    },
    "CreateEntity": {
      "properties": {
        "entity": {
          "type": "string",
          "description": "The name of the entity."
        },
        "description": {
          "type": "string",
          "description": "The description of the entity."
        },
        "type": {
          "type": "string",
          "description": "Reserved for future use."
        },
        "source": {
          "type": "string",
          "description": "The source of the entity. For system entities, `system.entities` is returned."
        },
        "open_list": {
          "type": "boolean",
          "default": false,
          "description": "Reserved for future use."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateValue"
          },
          "description": "An array of entity values."
        }
      },
      "required": [
        "entity"
      ]
    },
    "CreateExample": {
      "properties": {
        "text": {
          "type": "string",
          "description": "An example for an intent."
        }
      },
      "required": [
        "text"
      ]
    },
    "CreateIntent": {
      "properties": {
        "intent": {
          "type": "string",
          "description": "The name of the intent."
        },
        "description": {
          "type": "string",
          "description": "The description of the intent."
        },
        "examples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateExample"
          },
          "description": "An array of examples."
        }
      },
      "required": [
        "intent"
      ]
    },
    "CreateValue": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The text of the entity value."
        },
        "metadata": {
          "type": "object",
          "description": "Any metadata related to the entity value."
        },
        "synonyms": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Any array of synonyms for the entity value."
        }
      },
      "required": [
        "value"
      ]
    },
    "CreateWorkspace": {
      "allOf": [
        {
          "$ref": "#/definitions/WorkspaceRequest"
        }
      ]
    },
    "DialogNodeCollection": {
      "properties": {
        "dialog_nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DialogNodeResponse"
          },
          "description": "An array of dialog nodes."
        }
      }
    },
    "DialogNodeGoTo": {
      "properties": {
        "dialog_node": {
          "type": "string",
          "description": "The ID of the dialog node to go to."
        },
        "selector": {
          "type": "string",
          "description": "Where in the target node focus is passed to."
        },
        "return": {
          "type": "boolean",
          "description": "Reserved for future use."
        }
      }
    },
    "DialogNodeOutput": {
      "properties": {
        "text": {
          "type": "string",
          "description": "The output text of the dialog node."
        }
      }
    },
    "DialogNodeResponse": {
      "properties": {
        "dialog_node": {
          "type": "string",
          "description": "The dialog node ID."
        },
        "description": {
          "type": "string",
          "description": "The description of the dialog node."
        },
        "conditions": {
          "type": "string",
          "description": "The condition that will trigger the dialog node."
        },
        "parent": {
          "type": "string",
          "description": "The parent dialog node."
        },
        "previous_sibling": {
          "type": "string",
          "description": "The previous dialog node."
        },
        "output": {
          "$ref": "#/definitions/DialogNodeOutput"
        },
        "context": {
          "type": "object",
          "description": "The context for the dialog node."
        },
        "metadata": {
          "type": "object",
          "description": "The metadata for the dialog node."
        },
        "go_to": {
          "$ref": "#/definitions/DialogNodeGoTo"
        },
        "created": {
          "type": "string",
          "description": "The timestamp for creation of the dialog node."
        }
      },
      "required": [
        "created",
        "dialog_node",
        "description",
        "conditions",
        "parent",
        "previous_sibling",
        "output",
        "context",
        "metadata",
        "go_to"
      ]
    },
    "DialogStack": {
      "type": "object",
      "description": "",
      "properties": {
        "dialog_node": {
          "type": "string",
          "description": "The dialog node ID."
        }
      }
    },
    "EntityExportResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/EntityResponse"
        },
        {
          "$ref": "#/definitions/ValueCollection"
        }
      ]
    },
    "EntityResponse": {
      "properties": {
        "entity": {
          "type": "string",
          "description": "The name of the entity."
        },
        "description": {
          "type": "string",
          "description": "The description of the entity."
        },
        "type": {
          "type": "string",
          "description": "Reserved for future use."
        },
        "source": {
          "type": "string",
          "description": "The source of the entity. For system entities, `system.entities` is returned."
        },
        "open_list": {
          "type": "boolean",
          "default": false,
          "description": "Reserved for future use."
        },
        "created": {
          "type": "string",
          "description": "The timestamp for creation of the entity."
        },
        "updated": {
          "type": "string",
          "description": "The timestamp for the last update to the entity."
        }
      },
      "required": [
        "entity",
        "description",
        "type",
        "source",
        "open_list",
        "created",
        "updated"
      ]
    },
    "Error": {
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "ExampleCollection": {
      "properties": {
        "examples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExampleResponse"
          },
          "description": "An array of Examples collection."
        }
      }
    },
    "ExampleResponse": {
      "properties": {
        "created": {
          "type": "string",
          "description": "The timestamp for creation of the example."
        },
        "updated": {
          "type": "string",
          "description": "The timestamp for the last update to the example."
        },
        "text": {
          "type": "string",
          "description": "The text of the example."
        }
      },
      "required": [
        "created",
        "updated",
        "text"
      ]
    },
    "InputData": {
      "properties": {
        "text": {
          "type": "string",
          "description": "The user's input."
        }
      }
    },
    "Intent": {
      "type": "object",
      "description": "An array of intent-confidence pairs for the user input.",
      "properties": {
        "intent": {
          "type": "string",
          "description": "The name of the recognized intent."
        },
        "confidence": {
          "type": "number",
          "format": "double",
          "description": "A decimal percentage that represents Watson's confidence in the intent."
        }
      }
    },
    "IntentCollection": {
      "properties": {
        "intents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntentExportResponse"
          },
          "description": "An array of Intent collection."
        }
      }
    },
    "IntentExportResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/IntentResponse"
        },
        {
          "$ref": "#/definitions/ExampleCollection"
        }
      ]
    },
    "IntentResponse": {
      "properties": {
        "intent": {
          "type": "string",
          "description": "The name of the intent."
        },
        "description": {
          "type": "string",
          "description": "The description for the intent."
        },
        "created": {
          "type": "string",
          "description": "The timestamp for creation of the intent."
        },
        "updated": {
          "type": "string",
          "description": "The timestamp for the last update to the intent."
        }
      },
      "required": [
        "intent",
        "description",
        "created",
        "updated"
      ]
    },
    "LogMessageResponse": {
      "type": "object",
      "description": "Log message details.",
      "properties": {
        "level": {
          "type": "string",
          "description": "The severity of the message.",
          "enum": [
            "info",
            "error",
            "warn"
          ]
        },
        "msg": {
          "type": "string",
          "description": "The text of the message."
        }
      }
    },
    "MessageRequest": {
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/InputData"
        },
        "alternate_intents": {
          "type": "boolean",
          "description": "Whether to return more than one intent. Set to `true` to return all matching intents.",
          "default": false
        },
        "context": {
          "$ref": "#/definitions/Context"
        },
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuntimeEntity"
          },
          "description": "Include the entities from the previous response when they do not need to change and to prevent Watson from trying to identify them."
        },
        "intents": {
          "type": "array",
          "description": "Include the intents from the previous response when they do not need to change and to prevent Watson from trying to identify them.",
          "items": {
            "$ref": "#/definitions/Intent"
          }
        },
        "output": {
          "$ref": "#/definitions/OutputData"
        }
      },
      "required": [
        "input"
      ],
      "example": {
        "input": {
          "text": "Turn on the lights"
        },
        "alternate_intents": true
      }
    },
    "MessageResponse": {
      "type": "object",
      "required": [
        "context",
        "intents",
        "entities",
        "input",
        "output"
      ],
      "properties": {
        "input": {
          "$ref": "#/definitions/InputData",
          "description": "User's input from the request."
        },
        "context": {
          "$ref": "#/definitions/Context",
          "description": "State information for the conversation."
        },
        "entities": {
          "type": "array",
          "description": "Terms from the request that are identified as entities.",
          "items": {
            "$ref": "#/definitions/RuntimeEntity"
          }
        },
        "intents": {
          "type": "array",
          "description": "Terms from the request that are identified as intents.",
          "items": {
            "$ref": "#/definitions/Intent"
          }
        },
        "output": {
          "$ref": "#/definitions/OutputData",
          "description": "Includes the response to the user, the nodes that were hit, and messages from the log."
        }
      }
    },
    "OutputData": {
      "type": "object",
      "required": [
        "log_messages",
        "text"
      ],
      "properties": {
        "log_messages": {
          "type": "array",
          "description": "Up to 50 messages logged with the request.",
          "items": {
            "$ref": "#/definitions/LogMessageResponse"
          }
        },
        "text": {
          "type": "array",
          "description": "Responses to the user.",
          "items": {
            "type": "string"
          }
        },
        "nodes_visited": {
          "type": "array",
          "description": "The nodes that were executed to create the response.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RuntimeEntity": {
      "type": "object",
      "properties": {
        "entity": {
          "type": "string",
          "description": "The recognized entity from a term in the input."
        },
        "location": {
          "type": "array",
          "description": "Zero-based character offsets that indicate where the entity value begins and ends in the input text.",
          "items": {
            "type": "integer"
          },
          "maxItems": 2,
          "minItems": 2
        },
        "value": {
          "type": "string",
          "description": "The term in the input text that was recognized."
        }
      },
      "example": {
        "entity": "appliance",
        "location": [
          12,
          18
        ],
        "value": "light",
        "metadata": {}
      }
    },
    "SystemResponse": {
      "type": "object",
      "required": [
        "dialog_stack",
        "dialog_turn_counter",
        "dialog_request_counter"
      ],
      "properties": {
        "dialog_stack": {
          "type": "array",
          "description": "An array of dialog node IDs that are in focus in the conversation",
          "items": {
            "$ref": "#/definitions/DialogStack"
          }
        },
        "dialog_turn_counter": {
          "type": "integer",
          "description": "The number of cycles of user input and response in this conversation.",
          "maxItems": 1,
          "minItems": 1
        },
        "dialog_request_counter": {
          "type": "integer",
          "description": "The number of inputs in this conversation. This counter might be higher than the <tt>dialog_turn_counter</tt> counter when multiple inputs are needed before a response can be returned.",
          "maxItems": 1,
          "minItems": 1
        }
      }
    },
    "UpdateWorkspace": {
      "allOf": [
        {
          "$ref": "#/definitions/WorkspaceRequest"
        }
      ]
    },
    "ValueCollection": {
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueExportResponse"
          },
          "description": "An array of entity values."
        }
      }
    },
    "ValueExportResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ValueResponse"
        },
        {
          "properties": {
            "synonyms": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of synonyms."
            }
          }
        }
      ]
    },
    "ValueResponse": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The name of the corresponding entity."
        },
        "metadata": {
          "type": "object",
          "description": "Any metadata related to the entity value."
        },
        "created": {
          "type": "string",
          "description": "The timestamp for creation of the entity value."
        },
        "updated": {
          "type": "string",
          "description": "The timestamp for the last update to the entity value."
        }
      },
      "required": [
        "value",
        "metadata",
        "created",
        "updated"
      ]
    },
    "WorkspaceCollectionResponse": {
      "properties": {
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkspaceResponse"
          }
        }
      },
      "required": [
        "workspaces"
      ]
    },
    "WorkspaceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseWorkspace"
        },
        {
          "properties": {
            "intents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateIntent"
              }
            }
          }
        },
        {
          "properties": {
            "entities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateEntity"
              }
            }
          }
        },
        {
          "properties": {
            "dialog_nodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateDialogNode"
              }
            }
          }
        },
        {
          "properties": {
            "counterexamples": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateExample"
              }
            }
          }
        }
      ]
    },
    "WorkspaceResponse": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the workspace."
        },
        "description": {
          "type": "string",
          "description": "The description of the workspace."
        },
        "language": {
          "type": "string",
          "description": "The language of the workspace."
        },
        "metadata": {
          "type": "object",
          "description": "Any metadata that is required by the workspace."
        },
        "created": {
          "type": "string",
          "description": "The timestamp for creation of the workspace."
        },
        "updated": {
          "type": "string",
          "description": "The timestamp for the last update to the workspace."
        },
        "workspace_id": {
          "type": "string",
          "description": "The workspace ID."
        }
      },
      "required": [
        "name",
        "description",
        "language",
        "metadata",
        "created",
        "updated",
        "workspace_id"
      ]
    },
    "WorkspaceStatusResponse": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the workspace."
        },
        "description": {
          "type": "string",
          "description": "The description of the workspace."
        },
        "language": {
          "type": "string",
          "description": "The language of the workspace."
        },
        "metadata": {
          "type": "object",
          "description": "Any metadata that is required by the workspace."
        },
        "created": {
          "type": "string",
          "description": "The timestamp for creation of the workspace."
        },
        "updated": {
          "type": "string",
          "description": "The timestamp for the last update to the workspace."
        },
        "workspace_id": {
          "type": "string",
          "description": "The workspace ID."
        },
        "status": {
          "type": "string",
          "description": "The current status of the workspace (`Non Existent`, `Training`, `Failed`, `Available`, or `Unavailable`)."
        }
      },
      "required": [
        "name",
        "description",
        "language",
        "metadata",
        "created",
        "updated",
        "workspace_id",
        "status"
      ]
    },
    "WorkspaceExportResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/WorkspaceStatusResponse"
        },
        {
          "$ref": "#/definitions/IntentCollection"
        },
        {
          "$ref": "#/definitions/EntityCollection"
        },
        {
          "$ref": "#/definitions/CounterexampleCollection"
        },
        {
          "$ref": "#/definitions/DialogNodeCollection"
        }
      ]
    }
  }
}